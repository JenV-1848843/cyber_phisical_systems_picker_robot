import numpy as np 

# MAP VARIABLES
CELL_SIZE = 0.1
MAP_WIDTH = 5.0    # meters
MAP_HEIGHT = 4.4   # meters
MAP_SIZE_X = int(MAP_WIDTH / CELL_SIZE)
MAP_SIZE_Y = int(MAP_HEIGHT / CELL_SIZE)

OBSTACLE = -1
UNKNOWN = 0
FREE = 1
INFLATED_ZONE1 = 50
INFLATED_ZONE2 = 3


# ROBOT VARIABLES/SETTINGS
TIME_STEP = 64
WHEEL_RADIUS = 0.033
WHEEL_BASE = 0.160
MAX_SPEED = 6.28
OBSTACLE_THRESHOLD = 20  # Amont of times a cell needs to be occupied to be considered an obstacle
ROBOT_CORRIDOR_IDS = {1: None, 2: None}

# SERVER CONFIGURATION
SERVER_URL = "http://localhost:5000"  # Flask server

import numpy as np

backup_map = np.array([
    44 * [-1],
    [-1] + [1] * 42 + [-1],
    [-1] + [1] * 42 + [-1],
    [-1] + [1] * 42 + [-1],
    [-1] + [1] * 42 + [-1],
    [-1] + [1] * 42 + [-1],
    [-1] + [1] * 42 + [-1],
    [-1] + [1] * 42 + [-1],
    [-1] + [1] * 42 + [-1],
    [-1] + [1] * 42 + [-1],
    [-1] + [1] * 42 + [-1],
    [-1] + [1] * 42 + [-1],
    [-1] + [1] * 42 + [-1],
    [-1] + [1] * 42 + [-1],
    [-1] + [1] * 42 + [-1],
    [-1] + [1] * 42 + [-1],
    [-1] + [1] * 42 + [-1],
    [-1] + [1] * 42 + [-1],
    [-1] + [1] * 42 + [-1],
    [-1] + [1] * 42 + [-1],
    3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1],
    3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1],
    3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1],
    3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1],
    3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1],
    3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1],
    3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1],
    3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1],
    3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1],
    3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1],
    3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1],
    3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1],
    3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1],
    3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1],
    3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1],
    3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1],
    3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1],
    3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1],
    3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1],
    3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1],
    3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1],  
    3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1],
    3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1],
    3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1],
    3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1],
    3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1],
    3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1],
    3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1],
    3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1] + 3 * [-1] + 5 * [1] + 3 * [-1],
    44 * [-1],
], dtype=np.int8)

                      