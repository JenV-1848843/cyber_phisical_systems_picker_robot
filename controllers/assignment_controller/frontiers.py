import numpy as np

from config import MAP_SIZE_X, MAP_SIZE_Y

from SLAM.mapping import in_bounds

# Function to find the frontier cells in the grid map
def find_frontier_slow(grid_map):
    f = []
    for x in range(1, MAP_SIZE_X - 1):
        for y in range(1, MAP_SIZE_Y - 1):
            if grid_map[x][y] != 1:
                continue

            has_unknown_neighbor = any(
                in_bounds(x + dx, y + dy) and grid_map[x+dx][y+dy] == 0
                for dx, dy in [(-1,0), (1,0), (0,-1), (0,1)]
            )
            if not has_unknown_neighbor:
                continue

            f.append((x, y))
    return f

# Faster version generated by ChatGPT 
def find_frontier(grid_map):
    known_free = (grid_map == 1)
    unknown = (grid_map == 0)

    # Check neighbors of each cell
    up    = np.roll(unknown,  1, axis=0)
    down  = np.roll(unknown, -1, axis=0)
    left  = np.roll(unknown,  1, axis=1)
    right = np.roll(unknown, -1, axis=1)

    neighbor_unknown = up | down | left | right
    frontier_mask = known_free & neighbor_unknown

    # If the cell is on the edge of the map, it cannot be a frontier
    frontier_mask[0, :] = False
    frontier_mask[-1, :] = False
    frontier_mask[:, 0] = False
    frontier_mask[:, -1] = False

    frontier_coords = np.argwhere(frontier_mask)
    return [tuple(coord) for coord in frontier_coords]